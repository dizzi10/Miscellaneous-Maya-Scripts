import maya.cmds as cmds
import re 
from math import pow,sqrt
from functools import partial
from itertools import combinations

#Find Distance between two objects
highlist = []
lowlist = []

def FindMatchingObjs(objectList, highlist, lowlist):
    #This function taken from: http://www.timcallaway.com/?p=26
    def GetDistance(objA, objB):
    	gObjA = cmds.xform(objA, q=True, t=True, ws=True)
    	gObjB = cmds.xform(objB, q=True, t=True, ws=True)
    	
    	return( sqrt(pow(gObjA[0]-gObjB[0],2)+pow(gObjA[1]-gObjB[1],2)+pow(gObjA[2]-gObjB[2],2)) )
    
    def findobjAandObjB(matchedCombo,object):
        if object == matchedCombo[0]:
            objA = matchedCombo[0]
            objB = matchedCombo[1]
        else:
            objA = matchedCombo[1]
            objB = matchedCombo[0]
        return [objA , objB]   
   
    #generate a list with every possible combination of objects
    uniqueCombinations=combinations(objectList,2)
    uniqueCombinationsList = list(uniqueCombinations)
    #Iterate through every possible combination and keep the ones with a common object for comparing distances
    distancedict = dict()
    matchedObjs = []
     
    for object in objectList:
        for value in matchedObjs:
            """if object in value: #why doesn't this work
                print object
                print"its working"
                continue"""
        combolst=[]
        for combo in uniqueCombinationsList: #create lists that all have a common object for comparison
            if object in combo:
                combolst.append(combo)
        
        for matchedCombo in combolst: #organize the lists so that object being compared is the first value
            ABlst = findobjAandObjB(matchedCombo,object)
            objA = ABlst[0]
            objB = ABlst[1]
            distancedict[matchedCombo] = GetDistance(objA, objB)
        
        matchedObjs.append(min(distancedict, key=distancedict.get))
        distancedict.clear()
    matchedObjsfinal = list(dict.fromkeys(matchedObjs)) #removes duplicates in list, because dicitonaries cannot have duplicate keys
    def PolyCount(matchedObjsfinal, highlist, lowlist):
        for object in matchedObjsfinal:
            if cmds.polyEvaluate(object[0], t=True) > cmds.polyEvaluate(object[1], t=True):
                highlist.append(object[0])
                lowlist.append(object[1])
            else:
                highlist.append(object[1])
                lowlist.append(object[0])
        return highlist and lowlist

    PolyCount(matchedObjsfinal, highlist, lowlist)
    return(matchedObjsfinal)    



def UI():
    global windowID
    windowID = 'myWindowID'

    if cmds.window(windowID, exists=True):
        cmds.deleteUI(windowID)
    cmds.window(windowID, title="ObjectRenamer", sizeable=False)
    cmds.rowColumnLayout(numberOfColumns=4)

    cmds.text("Distance Pairs:")
    cmds.separator(style = 'none')
    cmds.text("Polygon Count Pairs:")
    cmds.separator(style = 'none')
    cmds.separator(style = 'none')
    cmds.text("Enter Here")
    cmds.separator(style = 'none')
    cmds.text("Enter Here")
    cmds.text("Prefix:", align = 'right')
    cmds.textField("prefixFieldInput")
    cmds.text("High Poly Suffix:", align = 'right')
    cmds.textField("highpolyFieldInput")
    cmds.text("Suffix:" , align = 'right')
    cmds.textField("suffixFieldInput")
    cmds.text("Low Poly Suffix:" , align = 'right')
    cmds.textField("lowpolyFieldInput")
    
    cmds.separator(h=20, style = 'none')
    cmds.separator(h=20, style = 'none')
    cmds.separator(h=20, style = 'none')
    cmds.separator(h=20, style = 'none')
    
    cmds.separator(style = 'none')
    cmds.separator(style = 'none')
    cmds.button(label="Apply", command="changeNames(objectList, highlist, lowlist)")
    def deleteWindow(*pArgs):
        if cmds.window(windowID, exists=True):
            cmds.deleteUI(windowID)  
    cmds.button(label="Cancel", command=deleteWindow)

    cmds.showWindow()


def changeNames(objectList, highlist, lowlist):
    prefix = cmds.textField("prefixFieldInput", query=True, text=True)
    suffix = cmds.textField("suffixFieldInput", query=True, text=True)
    highpolysuffix=cmds.textField("highpolyFieldInput",query=True,text=True)
    lowpolysuffix=cmds.textField("lowpolyFieldInput",query=True,text=True)
    for object in objectList:
        if object in highlist:
            newName = prefix + object + suffix + highpolysuffix
        if object in lowlist:
            newName = prefix + object + suffix + lowpolysuffix
        cmds.rename(object, newName)
    cmds.deleteUI(windowID)
    cmds.select(deselect=True)
    
objectList = cmds.ls(selection = True) 

MatchingsObjs =  FindMatchingObjs(objectList, highlist, lowlist)
print(MatchingsObjs)      
UI()
